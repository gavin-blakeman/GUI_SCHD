//**********************************************************************************************************************************
//
// PROJECT:             msmERP
// FILE:                pageSecurityTransaction
// SUBSYSTEM:           Module: Investement Management
// LANGUAGE:						C++
// TARGET OS:           LINUX
// LIBRARY DEPENDANCE:	None.
// NAMESPACE:           N/A
// AUTHOR:							Gavin Blakeman.
// LICENSE:             GPLv2
//
//                      Copyright 2023 Gavin Blakeman.
//                      This file is part of the msmERP Project
//
//                      msmERP is free software: you can redistribute it and/or modify it under the terms of the GNU
//                      General Public License as published by the Free Software Foundation, either version 2 of the License, or (at
//                      your option) any later version.
//
//                      msmERP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
//                      even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
//                      Public License for more details.
//
//                      You should have received a copy of the GNU General Public License along with msmERP.  If not,
//                      see <http://www.gnu.org/licenses/>.
//
// OVERVIEW:
//
// HISTORY:             2023-07-25/GGB - File Created
//
//**********************************************************************************************************************************

#include "include/pages/pageSecurityTransaction.h"

  // Standard C++ library header files

#include <utility>

  // Wt framework header files.

#include <Wt/WComboBox.h>
#include <Wt/WContainerWidget.h>
#include <Wt/WDateEdit.h>
#include <Wt/WDoubleSpinBox.h>
#include <Wt/WTable.h>
#include <Wt/WTemplate.h>
#include <Wt/WText.h>

  // Miscellaneous libraries

#include <boost/locale.hpp>

  // msmERP header files

#include "include/application.h"
#include "include/pages/interfaceTemplates.h"
#include "include/database/tables/core/tbl_businessTransactions.h"

namespace transactionPages
{

  /// @brief Constructor for the class.
  /// @param[in] parent: The parent object.
  /// @version 2022-07-29/GGB - Function created.

  CPageSecurityTransaction::CPageSecurityTransaction(CApplication &parent, std::unique_ptr<parameters_t> p)
    : CPageTransactionView(parent, std::move(p))
  {
    //modelAccountGroups = std::make_shared<models::CModelAccountGroups>(application());
    //modelAccountGroups->loadData();

//    modelAccountsInGroup = std::make_shared<models::CModelAccountsInGroup>(application(), dirtyRecord.parentID);
//    modelAccountsInGroup->loadData();

  }

  /// @brief    Clears all the fields.
  /// @throws
  /// @version  2023-07-25/GGB - Function created.

  void CPageSecurityTransaction::clearFields()
  {
    comboBoxPortfolio->setCurrentIndex(0);
    comboBoxSecurity->setCurrentIndex(0);
    comboBoxTransactionType->setCurrentIndex(0);
    spinBoxPrice->setValue(0);
    spinBoxPrice->setValue(0);
  }

  /// @brief      Creates the UI for the business unit view transaction.
  /// @throws
  /// @version    2019-11-09/GGB - Function created.

  void CPageSecurityTransaction::createUI()
  {
    tableStore.clear();
    container()->setOverflow(Wt::Overflow::Scroll);

    auto result = container()->addWidget(std::make_unique<Wt::WTemplate>(templateTransaction));
    result->addFunction("id", &Wt::WTemplate::Functions::id);

    lineEditTransaction = result->bindWidget("lineEditTransaction", std::make_unique<Wt::WLineEdit>());
    lineEditTransaction->setEnabled(false);
    lineEditTransaction->changed().connect([this]
    {
      switch(internalMode)
      {
        case BT_FIND:
        {
          processFind();
          break;
        }
        case BT_CREATE:
        {
          dirty(false);
          enableEdit(true);
          break;
        };
        default:
        {
          CODE_ERROR();
          break;
        }
      };
    });
    auto btn = result->bindWidget("actionButton", std::make_unique<Wt::WPushButton>("Action"));
    {
      auto popup = std::make_unique<Wt::WPopupMenu>();
      popup->addItem("Find");
      popup->addItem("Search");
      auto pp = popup.get();
      btn->setMenu(std::move(popup));
      btn->setStyleClass("btn-outline-primary");
      pp->itemSelected().connect([&](Wt::WMenuItem *item)
      {
        previousMode = internalMode;
        if (item->text() == "Find")
        {
          internalMode = BT_FIND;
        }
        else if (item->text() == "Search")
        {
          internalMode = BT_SEARCH;
        }
        else
        {
          CODE_ERROR();
        };
        checkSave();
      });
    }

    lineEditStatus = result->bindWidget("lineEditStatus", std::make_unique<Wt::WLineEdit>());
    lineEditStatus->setEnabled(false);
    btn = result->bindWidget("buttonStatus", std::make_unique<Wt::WPushButton>("Action"));
    createStatusButton(btn);


      // Create the entry areas for the common information

    comboBoxPortfolio = result->bindWidget("comboBoxPortfolio", std::make_unique<Wt::WComboBox>());
    //comboBoxPortfolio->setModel(modelEmployees);
    comboBoxPortfolio->changed().connect([this]
    {
      //timesheet.employeeID(std::any_cast<index_t>(modelEmployees->item(comboBoxEmployee->currentIndex())->data(Wt::ItemDataRole::User)));
      dirty();
    });

    comboBoxSecurity = result->bindWidget("comboBoxSecurity", std::make_unique<Wt::WComboBox>());

    spinBoxQuantity = result->bindWidget("spinBoxQuantity", std::make_unique<Wt::WDoubleSpinBox>());
    spinBoxPrice = result->bindWidget("spinBoxPrice", std::make_unique<Wt::WDoubleSpinBox>());

    lineEditCosts = result->bindWidget("lineEditCosts", std::make_unique<Wt::WLineEdit>());
    lineEditCosts->setEnabled(false);

    lineEditTotal = result->bindWidget("lineEditTotal", std::make_unique<Wt::WLineEdit>());
    lineEditTotal->setEnabled(false);

    dateEditPosting = result->bindWidget("dateEditPosting", std::make_unique<Wt::WDateEdit>());
    dateEditPosting->changed().connect([this]
    {
      //timesheet.date(dateEditTimeSheetDate->date());
      dirty();
    });
    dateEditPosting->setDate(Wt::WDate());

    lineEditBasePrice = result->bindWidget("lineEditBasePrice", std::make_unique<Wt::WLineEdit>());
    lineEditBasePrice->setEnabled(false);

      // Table for capturing the information

    tableTimeCostLine = container()->addNew<Wt::WTable>();
    tableTimeCostLine->setWidth(Wt::WLength("100%"));
    tableTimeCostLine->setHeaderCount(1);
    tableTimeCostLine->addStyleClass("table");
    tableTimeCostLine->addStyleClass("table-striped");

    int col = 0;

    pushButtonRowAdd = tableTimeCostLine->elementAt(0, col++)->addNew<Wt::WPushButton>("Add Line");
    pushButtonRowAdd->clicked().connect([this]
    {
      createCostLine();
    });
    pushButtonRowAdd->setEnabled(false);

    tableTimeCostLine->columnAt(0)->setWidth(100);
    tableTimeCostLine->elementAt(0, col++)->addNew<Wt::WText>("Cost Type");
    tableTimeCostLine->elementAt(0, col++)->addNew<Wt::WText>("Cost Element");
    tableTimeCostLine->elementAt(0, col++)->addNew<Wt::WText>("Value");

    createCostLine();

    //enableEdit(false);
  }

  /// @brief      Enable/Disable editing
  /// @param[in]  enable: true to enable editing.
  /// @throws
  /// @version    2023-07-25/GGB - Function created.

  void CPageSecurityTransaction::enableEdit(bool enable)
  {
    comboBoxPortfolio->setEnabled(enable);
    comboBoxSecurity->setEnabled(enable);
    comboBoxTransactionType->setEnabled(enable);
    spinBoxPrice->setEnabled(enable);
    spinBoxQuantity->setEnabled(enable);
  }

  /// @brief Populates the fields.
  /// @throws
  /// @version 2022-07-28/GGB - Function created.

  void CPageSecurityTransaction::populateFields()
  {
    //lineEditAccountName->setText(dirtyRecord.shortText);
    //comboBoxParentAccount->setCurrentIndex(modelAccountGroups->indexFromID(dirtyRecord.parentID));

//    modelAccountsInGroup->loadData();
//    comboBoxPlaceBefore->refresh();
//    comboBoxPlaceBefore->setCurrentIndex(modelAccountsInGroup->itemFromSortOrder(dirtyRecord.sortOrder) + 1);
  }

  /// @brief Function called when the check save/save process is complete.
  /// @throws
  /// @version 2022-08-01/GGB - Function created.

  void CPageSecurityTransaction::saveComplete()
  {
      // Update all the models.

    if (internalMode != BT_CLOSEWINDOW)
    {
      //modelAccountGroups->loadData();
    }

    switch(internalMode)
    {
      case BT_UPDATE:
      {
        enableEdit(true);
        break;
      }
      case BT_CREATE:
      {
        clearFields();
        //dirtyRecord.ID = 0;
//        dirtyRecord.parentID = 0;
        //dirtyRecord.shortText = "";
//        dirtyRecord.accountFlags.value = 0;
        enableEdit(true);
        break;
      }
      case BT_RECORDCHANGE:
      {
//        dirtyRecord.ID = pendingAccountID_;
//        database::tbl_fi_accounts::readRecord(application(), dirtyRecord);
//        cleanRecord = dirtyRecord;
        populateFields();
        break;
      };
      default:
      {
        CPageTransaction::saveComplete();
        break;
      }

    }
  }

  /// @brief Saves the changed data.
  /// @version 2022-08-01/GGB - Function created.

  void CPageSecurityTransaction::processSaveData()
  {
    using namespace database;

//    if (dirtyRecord.ID == 0)
//    {
//        /* Simple case - only need to update the sortOrder for all the affected items in the group that the new account
//         * is being inserted into.
//         */

////      database::tbl_gl_costElement::updateSortOrder(application(), dirtyRecord.parentID,
////                                                dirtyRecord.sortOrder,        // From this record
////                                                0,                            // To end
////                                                dirtyRecord.sortOrder + 1);

//      tbl_fi_accounts::createRecord(application(), dirtyRecord);
//    }
//    else
//    {
//        /* Two cases and some sub-cases.
//         *  1. If the account is moved to a new account group.
//         *    a) Update all affected accounts in the old account group.
//         *    b) Update all affected accounts in the new account group.
//         *
//         *  2. If the account group if the same
//         *    a) Update all the affected accounts in the account group.
//         */

////      if (dirtyRecord.parentID != cleanRecord.parentID)
////      {
////          // Case 1. account moved to new account group.
////          // Old account group

////        database::tbl_gl_costElement::updateSortOrder(application(), cleanRecord.parentID,
////                                                  cleanRecord.sortOrder,  // From this record
////                                                  0,                      // To end
////                                                  cleanRecord.sortOrder); // New starting value

////          // New account group

////        database::tbl_gl_costElement::updateSortOrder(application(), dirtyRecord.parentID,
////                                                  dirtyRecord.sortOrder,  // From this record
////                                                  0,                      // To end
////                                                  dirtyRecord.sortOrder + 1); // New Start
////      }
////      else if (dirtyRecord.sortOrder != cleanRecord.sortOrder)
////      {
////          // Case 2. account moved within old account group.
////          // This devolves into two cases, one where the record is going to be moved earlier in the list,
////          // and one where the record is going to be moved later in the list.

////        if (dirtyRecord.sortOrder < cleanRecord.sortOrder)
////        {
////            // Record being moved earlier.
////            // Move all the records from >= dirty && < clean

////          database::tbl_gl_costElement::updateSortOrder(application(),
////                                                    dirtyRecord.parentID,
////                                                    dirtyRecord.sortOrder,      // From this record
////                                                    cleanRecord.sortOrder,      // To this record
////                                                    dirtyRecord.sortOrder+1);  // New Start

////        }
////        else
////        {
////            // Record being moved later.
////            // Move all the records from >= clean && < dirty + 1

////          database::tbl_gl_costElement::updateSortOrder(application(),
////                                                    dirtyRecord.parentID,
////                                                    cleanRecord.sortOrder,        // From this record
////                                                    dirtyRecord.sortOrder + 1,    // To this record (because of the gt not gte)
////                                                    cleanRecord.sortOrder);       // New Start
////        }
////      };

//      //tbl_fi_accounts::updateRecord(application(), dirtyRecord);
//    }

//    cleanRecord = dirtyRecord;
//    enableEdit(false);
//    containerChartOfAccounts->updateData();
  }

  void CPageSecurityTransaction::createCostLine(bool )
  {

  }
  void CPageSecurityTransaction::deleteCostLine(std::size_t)
  {

  }


} // namespace transactions
